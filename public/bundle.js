/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/uuid/index.js":
/*!************************************!*\
  !*** ./node_modules/uuid/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var v1 = __webpack_require__(/*! ./v1 */ \"./node_modules/uuid/v1.js\");\nvar v4 = __webpack_require__(/*! ./v4 */ \"./node_modules/uuid/v4.js\");\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/index.js?");

/***/ }),

/***/ "./node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/lib/bytesToUuid.js?");

/***/ }),

/***/ "./node_modules/uuid/lib/rng-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\n\n//# sourceURL=webpack:///./node_modules/uuid/lib/rng-browser.js?");

/***/ }),

/***/ "./node_modules/uuid/v1.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v1.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/v1.js?");

/***/ }),

/***/ "./node_modules/uuid/v4.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v4.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/v4.js?");

/***/ }),

/***/ "./src/entities/boid.js":
/*!******************************!*\
  !*** ./src/entities/boid.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Enemy = __webpack_require__(/*! ./enemy */ \"./src/entities/enemy.js\");\nconst Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\nconst { map } = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.js\");\n\nclass Boid extends Enemy {\n    constructor(name, sprite, size, cells, endIdx) {\n        super(name, sprite, size, cells, endIdx);\n        // this.radius = size.w > size.h ? size.h / 5 : size.w / 5;\n        this.perceptionRadius = this.radius * 2;\n        // this.target = this.position;\n    }\n\n    applyBehaviors(path, boids, playerPos) {\n        // const follow = this.follow(path).multiply(2);\n        // const flock = new Vector();\n        // debugger\n        // const flock = this.flock(boids);\n        // debugger\n        let arrive = new Vector();\n        let follow = new Vector();\n        const separation = this.separate(boids).multiply(5);\n        if (this.position.dist(playerPos) < 5)\n            arrive = this.arrive(playerPos).multiply(0.3);\n        else follow = this.follow(path, playerPos).multiply(2);\n        this.applyForce(follow, separation, arrive);\n    }\n\n    seek(target) {\n        if (!target) return new Vector();\n        let desired = Vector.sub(target, this.position);\n        if (desired.getMagnitude() < 0.05) return new Vector();\n        desired = desired.normalize().multiply(this.maxSpeed);\n        const steering = Vector.sub(desired, this.velocity);\n        steering.limit(this.maxForce);\n        // this.applyForce(steering);\n        // console.log(steering);\n        // if (!steering) debugger\n        return steering;\n    }\n\n    arrive(target) {\n        if (!target) return;\n        const desired = Vector.sub(target, this.position);\n        const d = desired.getMagnitude();\n\n        if (d < this.perceptionRadius) {\n            desired.setMagnitude(map(d, 0, this.perceptionRadius, 0, this.maxSpeed));\n        } else desired.setMagnitude(this.maxSpeed);\n        const steering = Vector.sub(desired, this.velocity).setMagnitude(this.maxForce);\n        // this.applyForce(steering);\n        return steering;\n    }\n\n    follow(path, targetPos) {\n        const projection = this.velocity.normalize().multiply(this.perceptionRadius);\n        this.predictedPos = Vector.add(this.position, projection);\n\n        // let target = null;\n        let winner = Infinity;\n        // let winnerIdx = 0\n\n        for (let i = 0; i < path.nodes.length - 1; i++) {\n            let a = path.nodes[i].position;\n            let b = path.nodes[i + 1].position;\n\n\n            let normalPoint = Vector.getNormalPoint(this.predictedPos, a, b);\n\n\n\n            if (normalPoint.x < Math.min(a.x, b.x) || normalPoint.x > Math.max(a.x, b.x)) normalPoint = a.copy();\n            else if (normalPoint.y < Math.min(a.y, b.y) || normalPoint.y > Math.max(a.y, b.y)) normalPoint = a.copy();\n            // if (normalPoint.x < Math.min(a.position.x, b.position.x) || normalPoint.x > Math.max(a.position.x, b.position.x)) normalPoint = b.position.copy();\n            // else if (normalPoint.y < Math.min(a.position.y, b.position.y) || normalPoint.y > Math.max(a.position.y, b.position.y)) normalPoint = b.position.copy();\n\n            const dist = this.predictedPos.dist(normalPoint);\n            if (dist < winner) {\n                winner = dist;\n                this.normal = normalPoint.copy();\n                const dir = Vector.sub(b, a).normalize();\n                dir.multiply(this.perceptionRadius);\n                this.target = Vector.add(this.normal, dir);\n                // if (i === path.nodes.length - 2) this.solver.path.reverse();\n\n                // need to refine this check to make sure targetPos only becomes target if boid's position is a certain distance away from the last node\n                if (i === path.nodes.length - 2) this.target = targetPos;\n            }\n\n        }\n        const desired = this.seek(this.target);\n        if (!desired) debugger\n        // return desired;\n        // this.applyForce(desired);\n        if (!this.target) return this.seek(this.position);\n        return this.seek(this.target);\n    }\n\n    separate(boids) {\n        const sum = new Vector();\n        let count = 0;\n        boids.forEach(boid => {\n            const dist = this.position.dist(boid.position);\n\n            if (dist > 0 && dist < this.perceptionRadius) {\n                const diff = Vector.sub(this.position, boid.position).normalize();\n                sum.add(diff);\n                count++;\n            }\n        });\n\n        if (count > 0) {\n            sum.divide(count);\n            sum.setMagnitude(this.maxSpeed);\n            const steering = Vector.sub(sum, this.velocity);\n            steering.limit(this.maxForce);\n            // this.applyForce(steering);\n            return steering;\n        } else return new Vector();\n    }\n\n    align(boids) {\n        const sum = new Vector();\n        let count = 0;\n        boids.forEach(boid => {\n            const dist = this.position.dist(boid.position);\n            if (dist > 0 && dist < this.perceptionRadius * 4) {\n                sum.add(boid.velocity);\n                count++;\n            }\n        });\n        if (count > 0) {\n            sum.divide(count);\n            const sumN = sum.normalize();\n            sumN.setMagnitude(this.maxSpeed);\n\n            const steering = Vector.sub(sumN, this.velocity);\n            steering.limit(this.maxForce);\n            return steering;\n        } else return new Vector();\n    }\n\n    cohesion(boids) {\n        const sum = new Vector();\n        let count = 0;\n        boids.forEach(boid => {\n            const dist = this.position.dist(boid.position);\n            if (dist > 0 && dist < this.perceptionRadius * 2) {\n                sum.add(boid.position);\n                count++;\n            }\n        });\n        if (count > 0) {\n            sum.divide(count);\n            return this.seek(sum);\n        } else return new Vector();\n    }\n\n    flock(boids) {\n        const separation = this.separate(boids).multiply(1.4);\n        const alignment = this.align(boids).multiply(1);\n        const cohesion = this.cohesion(boids).multiply(0.5);\n\n        const netForce = new Vector()\n            .add(separation)\n            .add(alignment)\n            .add(cohesion);\n\n        return netForce;\n    }\n\n    // checkBounds() {\n    //     if (this.position.x - this.radius > c.width) this.position.x = -this.radius;\n    //     if (this.position.x + this.radius < 0) this.position.x = c.width + this.radius;\n    //     if (this.position.y + this.radius > c.height) this.position.y = -this.radius;\n    //     if (this.position.y - this.radius < 0) this.position.y = c.height + this.radius;\n    // }\n\n    update(dt) {\n        this.handleRotation();\n\n        this.velocity.add(this.acceleration);\n        this.velocity.limit(this.maxSpeed);\n        this.position.add(this.velocity);\n\n        // this.velocity.add(this.acceleration.multiply(dt));\n        // this.position.add(this.velocity.multiply(dt));\n        this.acceleration.multiply(0);\n\n        // this.checkBounds();\n    }\n\n    // render(ctx) {\n    //     // predicted position\n    //     // ctx.fillStyle = \"#f00\";\n    //     // ctx.beginPath();\n    //     // ctx.arc(this.predictedPos.x, this.predictedPos.y, this.radius / 3, 0, 2 * Math.PI);\n    //     // ctx.closePath();\n    //     // ctx.fill();\n\n    //     // boid\n    //     ctx.fillStyle = \"#f0f\";\n    //     ctx.beginPath();\n    //     ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    //     ctx.closePath();\n    //     ctx.fill();\n\n    //     // normal point on path relative to predicted pos\n    //     // ctx.fillStyle = \"#0ff\";\n    //     // ctx.beginPath();\n    //     // ctx.arc(this.normal.x, this.normal.y, this.radius / 3, 0, 2 * Math.PI);\n    //     // ctx.closePath();\n    //     // ctx.fill();\n\n    //     // // target point on path boid aims to seek\n    //     // ctx.fillStyle = \"#fff\";\n    //     // ctx.beginPath();\n    //     // ctx.arc(this.target.x, this.target.y, this.radius / 3, 0, 2 * Math.PI);\n    //     // ctx.closePath();\n    //     // ctx.fill();\n\n    //     this.solver.render(ctx);\n    // }\n}\n\nmodule.exports = Boid;\n\n//# sourceURL=webpack:///./src/entities/boid.js?");

/***/ }),

/***/ "./src/entities/bullet.js":
/*!********************************!*\
  !*** ./src/entities/bullet.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const uuid = __webpack_require__(/*! uuid */ \"./node_modules/uuid/index.js\");\nconst Sprite = __webpack_require__(/*! ./sprite */ \"./src/entities/sprite.js\");\nconst Entity = __webpack_require__(/*! ./entity */ \"./src/entities/entity.js\");\nconst Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\n\nclass Bullet {\n    constructor(sprite, pos, size) {\n        // super(size);\n        // super(sprite, size)\n        this.id = uuid();\n        this.sprite = sprite;\n        // this.sprite = sprite;\n        // debugger\n        this.position = pos.copy();\n        this.velocity = new Vector();\n\n        // this.velocity = {\n        //     x: 0,\n        //     y: 0\n        // };\n\n        this.radius = 4;\n\n        this.speed = 1000;\n\n        this.collided = false;\n\n        this.prevCollisionLength = 0;\n\n        // Bullet.bullets[this.id] = this;\n    }\n\n    updateVelocity(x, y) {\n        this.velocity.x = x * this.speed;\n        this.velocity.y = y * this.speed;\n    }\n\n    hit(entity) {\n        const dist = this.position.dist(entity.position);\n        if (dist <= this.radius + entity.radius) {\n            entity.hit();\n            return true;\n        }\n        return false;\n    }\n\n    update(dt) {\n        this.position.x += this.velocity.x * dt;\n        this.position.y += this.velocity.y * dt;\n    }\n\n    render(ctx, offset) {\n        // debugger\n        ctx.drawImage(Bullet.sprite, this.position.x + offset.x, this.position.y + offset.y);\n    }\n\n    static update(bullets, collisionDetector, dt) {\n        Object.keys(bullets).forEach(id => {\n            bullets[id].update(dt);\n            const collided = collisionDetector.detectCollision(bullets[id]);\n            if (collided.length > 0) bullets[id].collided = true;\n            if (bullets[id].collided) delete bullets[id];\n        });\n    }\n\n    static render(bullets, ...renderArgs) {\n        Object.values(bullets).forEach(bullet => bullet.render(...renderArgs));\n    }\n}\n\nBullet.bullets = {};\n\nmodule.exports = Bullet;\n\n//# sourceURL=webpack:///./src/entities/bullet.js?");

/***/ }),

/***/ "./src/entities/camera.js":
/*!********************************!*\
  !*** ./src/entities/camera.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { index } = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.js\");\n\nclass Camera {\n    constructor(width, height, cellCount, cellSize) {\n        this.cellCount = cellCount;\n        this.cellSize = cellSize;\n        this.screen = {\n            x: width,\n            y: height\n        };\n        this.startTile = {\n            row: 0,\n            col: 0\n        };\n        this.endTile = {\n            row: 0,\n            col: 0\n        };\n        this.offset = {\n            x: 0,\n            y: 0\n        };\n    }\n\n    update(px, py) {\n        // this.resize();\n        this.offset.x = Math.floor(this.screen.x / 2 - px); // - this.screen.x / 2;\n        this.offset.y = Math.floor(this.screen.y / 2 - py); // - this.screen.y / 2;\n        // debugger\n        // this.offset.x = -px;\n        // this.offset.y = -py\n        // const tile = {\n        //     row: Math.floor(py / this.cellSize),\n        //     col: Math.floor(px / this.cellSize)\n        // };\n        let row = Math.floor(py / this.cellSize);\n        let col = Math.floor(px / this.cellSize);\n\n        let maxHorizontalCells = Math.ceil(this.screen.x / this.cellSize);\n        let maxVerticalCells = Math.ceil(this.screen.y / this.cellSize);\n        // console.log(maxHorizontalCells, maxVerticalCells);\n        // console.log(this.screen.x / this.cellSize);\n        // console.log(this.screen.y / this.cellSize);\n\n        this.startTile.col = col - Math.floor(maxHorizontalCells / 2);\n        this.startTile.row = row - Math.floor(maxVerticalCells / 2);\n\n        // this.startTile.row = row - 1 - Math.ceil((this.screen.x / 2) / this.cellSize);\n        // this.startTile.col = col - 1 - Math.ceil((this.screen.y) / this.cellSize);\n        // debugger\n        if (this.startTile.row < 0) this.startTile.row = 0;\n        if (this.startTile.col < 0) this.startTile.col = 0;\n\n        this.endTile.col = col + 1 + Math.ceil(maxHorizontalCells / 2);\n        this.endTile.row = row + 1 + Math.ceil(maxVerticalCells / 2);\n\n        // this.endTile.row = row + 1 + Math.ceil((this.screen.x / 2) / this.cellSize);\n        // this.endTile.col = col + 1 + Math.ceil((this.screen.y) / this.cellSize);\n        // debugger\n\n        // debugger\n        if (this.endTile.row > this.cellCount) this.endTile.row = this.cellCount;\n        if (this.endTile.col > this.cellCount) this.endTile.col = this.cellCount;\n    }\n\n    render(ctx, grid) {\n        for (let j = this.startTile.col; j < this.endTile.col; j++) {\n            for (let i = this.startTile.row; i < this.endTile.row; i++) {\n                grid[index(i, j, this.cellCount)].render(ctx, null, this.offset.x, this.offset.y);\n            }\n        }\n    }\n}\n\nmodule.exports = Camera;\n\n//# sourceURL=webpack:///./src/entities/camera.js?");

/***/ }),

/***/ "./src/entities/enemy.js":
/*!*******************************!*\
  !*** ./src/entities/enemy.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { index } = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.js\");\nconst Sprite = __webpack_require__(/*! ./sprite */ \"./src/entities/sprite.js\");\nconst A_Star = __webpack_require__(/*! ../maze/solver/a_star */ \"./src/maze/solver/a_star.js\");\nconst Cell = __webpack_require__(/*! ../maze/cell */ \"./src/maze/cell.js\");\nconst Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\n\nconst uuid = __webpack_require__(/*! uuid */ \"./node_modules/uuid/index.js\");\n\nclass Enemy extends Sprite {\n    constructor(name, sprite, size, cells, endIdx) {\n        super(sprite, size);\n        this.id = uuid();\n        this.name = name;\n        this.hpMax = this.hp = 100;\n        this.cellCount = Math.sqrt(cells.length);\n\n        const row = Math.floor(Math.random() * this.cellCount);\n        const col = Math.floor(Math.random() * this.cellCount);\n\n        // this.position = new Vector(col * size.w + this.sprite.width / 2, row * size.h + this.sprite.height / 2);\n        this.position.x = col * size.w + this.sprite.width / 2;\n        this.position.y = row * size.h + this.sprite.height / 2;\n\n        // let solverCells = cells.map(cell => new Cell(cell.row, cell.col, cell.size));\n        let startIdx = index(row, col, this.cellCount);\n        // let start = Object.assign(Object.create(Object.getPrototypeOf(cell)), cell);\n        // debugger\n        // cells = cells.map(cell => Object.assign(Object.create(Object.getPrototypeOf(cell)), cell));\n        // debugger\n        this.solver = new A_Star(\n            startIdx,\n            endIdx,\n            cells\n        );\n        // this.cells = cells;\n    }\n\n    resize(size) {\n        this.aspectRatio = size.h / size.w * 0.75;\n        // console.log(this.sprite);\n        // console.log(this.sprite.width, this.sprite.height);\n        // this.sprite.width = this.size.width / this.aspectRatio;\n        // this.sprite.height = this.size.height / this.aspectRatio;\n        if (this.solver.finished) this.solver.resize();\n    }\n    updateSolver(endIdx) {\n        let row = Math.floor(this.position.y / this.size.h);\n        let col = Math.floor(this.position.x / this.size.w);\n        // let start = this.cells[index(row, col, this.cellCount)];\n\n        // this.solver.start = start;\n        // this.solver.end = end;\n        // this.solver.openSet.push(this.solver.start);\n        // this.solver.closedSet = [];\n        // this.solver.finished = false;\n        // this.solver.path.clear();\n        // this.solver.initialTime = Date.now();\n\n        // this.solver.updateSolver(start, end);\n        // console.log(this.name, this.solver, this.solver.path);\n        this.solver.updateSolver(index(row, col, this.cellCount), endIdx);\n    }\n\n    handleRotation() {\n        // console.log('rotate');\n        if (!this.target) return;\n        const diff = Vector.sub(this.target, this.position);\n        this.angle = diff.getDirection();\n    }\n\n    attack(player) {\n        const dist = this.position.dist(player.position);\n        if (dist <= this.radius + player.radius) {\n            player.hit();\n            this.hit(0.1);\n            return true;\n        }\n        return false;\n    }\n\n    hit(dmg) {\n        this.hp -= dmg || 25;\n        // this.dead();\n\n        // return false;\n    }\n\n    dead() {\n        if (this.hp <= 0) return true;\n        return false\n    }\n\n    update() {\n        this.handleRotation();\n        this.solver.update();\n    }\n\n    render(ctx, offset) {\n        // ctx.fillStyle = \"#f0f\";\n        // ctx.beginPath();\n        // ctx.arc(this.position.x + offset.x, this.position.y + offset.y, this.radius, 0, 2 * Math.PI);\n        // ctx.closePath();\n        // ctx.fill();\n\n        ctx.save();\n        ctx.translate(this.position.x + offset.x, this.position.y + offset.y);\n\n        // render hp bar\n        ctx.fillStyle = \"#c7c7c7\";\n        ctx.fillRect(-50, -40, 100, 10);\n\n        // generic red bar\n        // ctx.fillStyle = \"#cc0000\";\n        // dynamic bar\n        const ar = 255;\n        const ag = 0;\n        const ab = 0;\n\n        const br = 0;\n        const bg = 255;\n        const bb = 0;\n\n        const ratio = this.hp / this.hpMax;\n        const cr = ar + (br - ar) * ratio;\n        const cg = ag + (bg - ag) * ratio;\n        const cb = ab + (bb - ab) * ratio;\n        ctx.fillStyle = `rgb(${cr}, ${cg}, ${cb})`;\n        const width = Math.floor(100 * this.hp / this.hpMax);\n        ctx.fillRect(-50, -40, width, 10);\n\n\n        ctx.rotate(this.angle);\n        ctx.drawImage(this.sprite, -this.sprite.width / 2, -this.sprite.height / 2);\n        // ctx.drawImage(this.sprite, -this.sprite.width / 2, -this.sprite.height / 2);\n        // debugger\n        ctx.restore();\n\n\n        //     // normal point on path relative to predicted pos\n        //     // ctx.fillStyle = \"#0ff\";\n        //     // ctx.beginPath();\n        //     // ctx.arc(this.normal.x, this.normal.y, this.radius / 3, 0, 2 * Math.PI);\n        //     // ctx.closePath();\n        //     // ctx.fill();\n\n        //     // // target point on path boid aims to seek\n        // ctx.fillStyle = \"#fff\";\n        // ctx.beginPath();\n        // ctx.arc(this.target.x, this.target.y, this.radius / 3, 0, 2 * Math.PI);\n        // ctx.closePath();\n        // ctx.fill();\n\n        // if (this.solver.finished) this.solver.render(ctx);\n        // this.solver.render(ctx);\n    }\n}\n\nmodule.exports = Enemy;\n\n//# sourceURL=webpack:///./src/entities/enemy.js?");

/***/ }),

/***/ "./src/entities/entity.js":
/*!********************************!*\
  !*** ./src/entities/entity.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\n\nclass Entity {\n    constructor(size) {\n        // this.sprite = sprite;\n        // this.size = size / 3;\n\n        this.position = new Vector();\n\n        this.maxSpeed = 0.2;\n        this.maxForce = 0.005;\n        this.velocity = new Vector(this.maxSpeed, 0);\n        this.acceleration = new Vector();\n\n        this.size = size;\n        this.angle = 0;\n        this.speed = 0;\n        this.radius = size.w > size.h ? size.h / 8 : size.w / 8;\n    }\n\n    applyForce(...forces) {\n        forces.forEach(force => {\n            this.acceleration.add(force);\n        });\n    }\n}\n\nmodule.exports = Entity;\n\n//# sourceURL=webpack:///./src/entities/entity.js?");

/***/ }),

/***/ "./src/entities/pickups/flag.js":
/*!**************************************!*\
  !*** ./src/entities/pickups/flag.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Sprite = __webpack_require__(/*! ../sprite */ \"./src/entities/sprite.js\");\n\nclass Flag extends Sprite {\n    constructor(sprite, size) {\n        super(sprite, size);\n    }\n\n    render(ctx, offset) {\n        ctx.save();\n        // ctx.translate(this.position.x + offset.x, this.position.y + offset.y);\n        ctx.translate(this.position.x + offset.x, this.position.y + offset.y);\n        // ctx.translate(this.position.x + offset.x + this.size.w / 2, this.position.y + offset.y + this.size.h / 2);\n        // ctx.rotate(this.angle * Math.PI / 180);\n        ctx.drawImage(this.sprite, 0, 0, this.sprite.width, this.sprite.height, 0, 0, this.sprite.size.w, this.sprite.size.h);\n        // ctx.drawImage(this.sprite, 0, 0);\n        // ctx.beginPath();\n        // // ctx.arc(8, 12, 8, 0, Math.PI * 2);\n        // ctx.closePath();\n        // ctx.fill();\n        ctx.restore();\n    }\n}\n\nmodule.exports = Flag;\n\n//# sourceURL=webpack:///./src/entities/pickups/flag.js?");

/***/ }),

/***/ "./src/entities/pickups/key.js":
/*!*************************************!*\
  !*** ./src/entities/pickups/key.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Sprite = __webpack_require__(/*! ../sprite */ \"./src/entities/sprite.js\");\n\nclass Key extends Sprite {\n    constructor(sprite, size, color) {\n        super(sprite, size);\n        this.keyColor = color;\n    }\n\n    static render(ctx) {\n        ctx.drawImage(Key.default.sprite, 0, 0);\n    }\n\n    render(ctx, offset) {\n        ctx.save();\n        // ctx.translate(this.position.x + offset.x, this.position.y + offset.y);\n        ctx.translate(this.position.x + offset.x + this.size.w / 2, this.position.y + offset.y + this.size.h / 2);\n        // ctx.rotate(this.angle * Math.PI / 180);\n        ctx.drawImage(this.sprite, 0, 0, this.sprite.width, this.sprite.height, 0, 0, this.sprite.size.w, this.sprite.size.h);\n        // ctx.beginPath();\n        // // ctx.arc(8, 12, 8, 0, Math.PI * 2);\n        // ctx.closePath();\n        // ctx.fill();\n        ctx.restore();\n        // ctx.fillStyle = \"#f0f\";\n        // ctx.fillRect(this.position.x + offset.x + this.size.w / 2, this.position.y + offset.y + this.size.h / 2, 10, 10);\n        // ctx.fillStyle = \"#ff0\";\n        // ctx.fillRect(this.position.x + offset.x, this.position.y + offset.y, 10, 10);\n    }\n}\n\nmodule.exports = Key;\n\n//# sourceURL=webpack:///./src/entities/pickups/key.js?");

/***/ }),

/***/ "./src/entities/player.js":
/*!********************************!*\
  !*** ./src/entities/player.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const KEYS = __webpack_require__(/*! ../utils/keys */ \"./src/utils/keys.js\");\nconst Sprite = __webpack_require__(/*! ./sprite */ \"./src/entities/sprite.js\");\nconst Bullet = __webpack_require__(/*! ./bullet */ \"./src/entities/bullet.js\");\nconst Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\n\nFunction.prototype.throttle = function (interval) {\n    // declare a variable outside of the returned function\n    let tooSoon = false;\n    return (...args) => {\n        // the function only gets invoked if tooSoon is false\n        // it sets tooSoon to true, and uses setTimeout to set it back to\n        // false after interval ms\n        // any invocation within this interval will skip the if \n        // statement and do nothing\n        if (!tooSoon) {\n            tooSoon = true;\n            setTimeout(() => tooSoon = false, interval);\n            this(...args);\n        }\n    }\n}\n\nconst throttle = (func, interval) => {\n    let tooSoon = false;\n    return (...args) => {\n        if (!tooSoon) {\n            tooSoon = true;\n            setTimeout(() => tooSoon = false, interval);\n            func(...args);\n        }\n    }\n}\n\n\nFunction.prototype.debounce = function (interval) {\n    // declare a variable outside of the returned function\n    let timeout;\n    // return a function that takes an arbitrary number of arguments\n    return (...args) => {\n        // declare a function that sets timeout to null and invokes this with args\n        const fnCall = () => {\n            timeout = null;\n            this(...args);\n        }\n        // each time this function is called, it will clear the previous timeout\n        // and create a new one that invokes fnCall after the interval has passed\n        // since the timeout is reset every time the function is invoked, \n        // fnCall will only be called once the interval has passed without any new \n        // invocations\n        clearTimeout(timeout);\n        timeout = setTimeout(fnCall, interval);\n    }\n}\n\nclass Player extends Sprite {\n    constructor(sprite, cellSize, inputHandler) {\n        super(sprite, cellSize);\n        this.hpMax = this.hp = 100;\n        // this.size = size / 3;\n        // this.radius = this.size * 3 / 2;\n\n        // this.position.x = this.sprite.width - this.sprite.width / 2;\n        // this.position.y = this.sprite.height - this.sprite.height / 2;\n        this.position.x = cellSize.w / 2;\n        this.position.y = cellSize.h / 2;\n\n        this.speed = 250;\n\n        this.ih = inputHandler;\n\n        this.size = cellSize;\n\n        // this.radius = size.w > size.h ? size.h / 5 : size.w / 5;\n        // this.bullets = {};\n\n        // const debounce = (func, delay) => {\n        //     let inDebounce\n        //     return function () {\n        //         const context = this\n        //         const args = arguments\n        //         clearTimeout(inDebounce)\n        //         inDebounce = setTimeout(() => func.apply(context, args), delay)\n        //     }\n        // }\n\n        // const throttle = (func, limit) => {\n        //     let lastFunc\n        //     let lastRan\n        //     return function () {\n        //         const context = this\n        //         const args = arguments\n        //         if (!lastRan) {\n        //             func.apply(context, args)\n        //             lastRan = Date.now()\n        //         } else {\n        //             clearTimeout(lastFunc)\n        //             lastFunc = setTimeout(function () {\n        //                 if ((Date.now() - lastRan) >= limit) {\n        //                     func.apply(context, args)\n        //                     lastRan = Date.now()\n        //                 }\n        //             }, limit - (Date.now() - lastRan))\n        //         }\n        //     }\n        // }\n\n        // // this.shoot = debounce(this.shoot, 10);\n        // this.shoot = throttle(this.shoot.bind(this), 100);\n        // document.addEventListener('mousemove', this.handleRotation.bind(this));\n        // this.shoot = this.shoot.throttle(100);\n        this.shoot = throttle(this.shoot.bind(this), 50);\n        // this.shoot = this.shoot.debounce(100);\n        this.delta = new Vector();\n        this.bullets = {};\n        this.keys = {\n            \"blue\": null,\n            \"green\": null,\n            \"red\": null\n        };\n\n        this.time = Date.now();\n        this.kills = 0;\n    }\n\n    handleRotation(delta, origin) {\n        this.angle = Math.atan2(delta.y, delta.x) * 180 / Math.PI;\n\n        if (this.angle < 0) {\n\n            this.angle = 360 + this.angle;\n\n        }\n        // const dist = Vector.sub(origin, delta);\n        // this.angle = dist.angleBetween(new Vector(1, 0));\n    }\n\n    handleInput() {\n        // debugger\n        if (this.ih.isPressed(KEYS.UP)) {\n            this.velocity.y = -this.speed;\n        } else if (this.ih.isPressed(KEYS.DOWN)) {\n            this.velocity.y = this.speed;\n        } else {\n            this.velocity.y = 0;\n        }\n\n        if (this.ih.isPressed(KEYS.RIGHT)) {\n            this.velocity.x = this.speed;\n        } else if (this.ih.isPressed(KEYS.LEFT)) {\n            this.velocity.x = -this.speed;\n        } else {\n            this.velocity.x = 0;\n        }\n    }\n\n    shoot(delta) {\n        // debugger\n        const bullet = new Bullet(this.bulletSprite, this.position, this.size);\n        let x, y;\n        if (navigator.getGamepads()[0]) {\n            x = this.delta.x;\n            y = this.delta.y;\n        } else {\n            x = delta.x;\n            y = delta.y;\n        }\n        const magnitude = Math.sqrt(x * x + y * y);\n\n        x /= magnitude;\n        y /= magnitude;\n\n        bullet.updateVelocity(x, y);\n        // if (!bullet.sprite) return;\n        this.bullets[bullet.id] = bullet;\n    }\n\n    hit() {\n        this.hp -= 0.05;\n        if (this.hp < 0) this.hp = 0;\n    }\n\n    dead() {\n        return this.hp <= 0;\n    }\n\n    pickUpKey(key) {\n        console.log('picked up key:', key);\n        this.keys[key.keyColor] = key;\n    }\n\n    update(dt, collisionDetector) {\n        // this.handleInput();\n        // this.position.x += this.velocity.x * dt;\n        // this.position.y += this.velocity.y * dt;\n        this.position.add(this.velocity.multiply(dt));\n        // console.log(this.velocity);\n\n        Bullet.update(this.bullets, collisionDetector, dt);\n    }\n\n    renderUI(ctx) {\n        // const grd = ctx.createLinearGradient(0.000, 150.000, 300.000, 150.000);\n\n        // Add colors\n        // grd.addColorStop(0.000, 'rgba(225, 0, 25, 1.000)');\n        // grd.addColorStop(0.330, 'rgba(255, 127, 0, 1.000)');\n        // grd.addColorStop(0.657, 'rgba(255, 255, 0, 1.000)');\n        // grd.addColorStop(1.000, 'rgba(0, 96, 27, 1.000)');\n\n        // Fill with gradient\n        ctx.fillStyle = \"#c7c7c7\";\n        ctx.fillRect(75, 40, 1000, 83);\n        // ctx.fillStyle = grd;\n        // ctx.fillStyle = \"#cc0000\";\n\n        // gradient color\n        const ar = 255;\n        const ag = 0;\n        const ab = 0;\n\n        const br = 0;\n        const bg = 255;\n        const bb = 0;\n\n        const ratio = this.hp / this.hpMax;\n        const cr = ar + (br - ar) * ratio;\n        const cg = ag + (bg - ag) * ratio;\n        const cb = ab + (bb - ab) * ratio;\n        ctx.fillStyle = `rgb(${cr}, ${cg}, ${cb})`;\n        const width = Math.floor(1000 * this.hp / this.hpMax);\n        ctx.fillRect(75, 40, width, 83);\n\n        ctx.save();\n        ctx.strokeStyle = \"#fff\";\n        ctx.lineWidth = 5.0;\n        ctx.fillStyle = \"#FF0000\";\n        const d = 50\n        const k = 10;\n        ctx.beginPath();\n        ctx.moveTo(75, 40);\n        ctx.bezierCurveTo(75, 37, 70, 25, 50, 25);\n        // ctx.beginPath()\n        // ctx.arc(50, 25, 4, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n        ctx.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);\n        // ctx.beginPath()\n        // ctx.arc(20, 25, 4, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n        ctx.bezierCurveTo(20, 80, 40, 102, 75, 120);\n        ctx.bezierCurveTo(110, 102, 130, 80, 130, 62.5);\n        ctx.bezierCurveTo(130, 62.5, 130, 25, 100, 25);\n        ctx.bezierCurveTo(85, 25, 75, 37, 75, 40);\n        // ctx.beginPath()\n        // ctx.arc(75, 40, 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        // ctx.closePath();\n        ctx.fill()\n        ctx.restore();\n\n        // render keys\n        // Object.keys(this.keys).forEach(key => {\n        //     if (this.keys[key]) {\n        //         key.render(ctx);\n        //     } else {\n        //         Key.render(ctx);\n        //     }\n        // });\n    }\n\n    render(ctx, offset) {\n        // debug sphere\n        // ctx.fillStyle = \"#f0f\";\n        // ctx.beginPath();\n        // ctx.arc(this.position.x + offset.x, this.position.y + offset.y, this.radius, 0, 2 * Math.PI);\n        // ctx.closePath();\n        // ctx.fill();\n\n        // hp bar\n\n        // ctx.moveTo(k, k + d / 4);\n        // ctx.quadraticCurveTo(k, k, k + d / 4, k);\n        // ctx.quadraticCurveTo(k + d / 2, k, k + d / 2, k + d / 4);\n        // ctx.quadraticCurveTo(k + d / 2, k, k + d * 3 / 4, k);\n        // ctx.quadraticCurveTo(k + d, k, k + d, k + d / 4);\n        // ctx.quadraticCurveTo(k + d, k + d / 2, k + d * 3 / 4, k + d * 3 / 4);\n        // ctx.lineTo(k + d / 2, k + d);\n        // ctx.lineTo(k + d / 4, k + d * 3 / 4);\n        // ctx.quadraticCurveTo(k, k + d / 2, k, k + d / 4);\n        // ctx.stroke();\n        // ctx.fill();\n\n\n\n\n\n\n\n        // ctx.beginPath();\n        // ctx.arc(75, 40, 2, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n\n        // ctx.beginPath();\n        // ctx.arc(50, 25, 2, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n\n        // ctx.beginPath();\n        // ctx.arc(20, 62.5, 2, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n\n        // ctx.beginPath();\n        // ctx.arc(75, 120, 2, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n\n        // ctx.beginPath();\n        // ctx.arc(130, 62.5, 2, 0, 2 * Math.PI);\n        // ctx.stroke();\n        // ctx.closePath();\n        // ctx.fillStyle = \"#0f0\";\n        // ctx.fillRect(d + k, k, d, d);\n\n        // ctx.strokeStyle = \"#0f0\";\n        // ctx.moveTo(d + k, 0);\n        // ctx.lineTo(d + k, d + k);\n        // ctx.moveTo(50, 0);\n        // ctx.lineTo(100, 100);\n\n        ctx.save();\n        ctx.translate(this.position.x + offset.x, this.position.y + offset.y);\n        ctx.rotate(this.angle * Math.PI / 180);\n        ctx.drawImage(this.sprite, -this.sprite.width / 2, -this.sprite.height / 2);\n        ctx.restore();\n\n\n\n        Bullet.render(this.bullets, ctx, offset);\n\n    }\n}\n\nmodule.exports = Player;\n\n//# sourceURL=webpack:///./src/entities/player.js?");

/***/ }),

/***/ "./src/entities/sprite.js":
/*!********************************!*\
  !*** ./src/entities/sprite.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Entity = __webpack_require__(/*! ./entity */ \"./src/entities/entity.js\");\n\nclass Sprite extends Entity {\n    constructor(sprite, size) {\n        super(size);\n        this.sprite = sprite;\n        this.aspectRatio = size.w / size.h;\n        // this.angle = -45;\n        // console.log(this.sprite);\n        // console.log(this.sprite.width, this.sprite.height);\n        // this.sprite.width = this.size.width / this.aspectRatio;\n        // this.sprite.height = this.size.height / this.aspectRatio;\n        // debugger\n        // console.log(this.sprite.width, this.sprite.height);\n    }\n\n    handleRotation() { }\n\n    resize(size) {\n        // this.aspectRatio = size.h / size.w * 0.75;\n        // console.log(this.sprite);\n        // console.log(this.sprite.width, this.sprite.height);\n        // this.sprite.width = this.size.width / this.aspectRatio;\n        // this.sprite.height = this.size.height / this.aspectRatio;\n\n        this.radius = size.w > size.h ? size.h / 2.5 : size.w / 2.5;\n    }\n\n    render(ctx, offset) {\n        ctx.save();\n        // ctx.translate(this.position.x + offset.x, this.position.y + offset.y);\n        ctx.translate(this.position.x + offset.x + this.size.w / 2, this.position.y + offset.y + this.size.h / 2);\n        ctx.rotate(this.angle * Math.PI / 180);\n        ctx.drawImage(this.sprite, 0, 0, this.sprite.width, this.sprite.height, 0, 0, this.sprite.size.w, this.sprite.size.h);\n        // ctx.beginPath();\n        // // ctx.arc(8, 12, 8, 0, Math.PI * 2);\n        // ctx.closePath();\n        // ctx.fill();\n        ctx.restore();\n        // ctx.fillStyle = \"#f0f\";\n        // ctx.fillRect(this.position.x + offset.x + this.size.w / 2, this.position.y + offset.y + this.size.h / 2, 10, 10);\n        // ctx.fillStyle = \"#ff0\";\n        // ctx.fillRect(this.position.x + offset.x, this.position.y + offset.y, 10, 10);\n    }\n}\n\nmodule.exports = Sprite;\n\n//# sourceURL=webpack:///./src/entities/sprite.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { index } = __webpack_require__(/*! ./utils/utils */ \"./src/utils/utils.js\");\nconst Grid = __webpack_require__(/*! ./maze/grid */ \"./src/maze/grid.js\");\nconst Maze = __webpack_require__(/*! ./maze/maze */ \"./src/maze/maze.js\");\nconst Player = __webpack_require__(/*! ./entities/player */ \"./src/entities/player.js\");\nconst InputManager = __webpack_require__(/*! ./utils/input */ \"./src/utils/input.js\");\nconst Boid = __webpack_require__(/*! ./entities/boid */ \"./src/entities/boid.js\");\nconst Camera = __webpack_require__(/*! ./entities/camera */ \"./src/entities/camera.js\");\nconst Vector = __webpack_require__(/*! ./utils/vector */ \"./src/utils/vector.js\");\nconst Bullet = __webpack_require__(/*! ./entities/bullet */ \"./src/entities/bullet.js\");\nconst CollisionDetector = __webpack_require__(/*! ./physics/collision */ \"./src/physics/collision.js\");\nconst KEYS = __webpack_require__(/*! ./utils/keys */ \"./src/utils/keys.js\");\nconst Key = __webpack_require__(/*! ./entities/pickups/key */ \"./src/entities/pickups/key.js\");\nconst Flag = __webpack_require__(/*! ./entities/pickups/flag */ \"./src/entities/pickups/flag.js\");\nconst UIManager = __webpack_require__(/*! ./utils/ui */ \"./src/utils/ui.js\");\n\n// GAME CONSTANTS\nconst MAX_ENEMIES = 15;\n\nclass Game {\n    constructor(size, rm) {\n        this.rm = rm;\n        // this.rm.onReady(this.initSprites.bind(this));\n\n        this.canvas = document.getElementById('canvas');\n        this.ctx = this.canvas.getContext('2d');\n\n        this.cellCount = size;\n        window.addEventListener('resize', this.resize.bind(this), false);\n        window.addEventListener('orientationchange', this.resize.bind(this), false);\n        this.resize();\n\n        this.ih = new InputManager();\n\n        this.player = new Player(this.rm.get('player_standing'), this.cellSize, this.ih);\n        this.collisionDetector = new CollisionDetector(size);\n\n\n        this.grid = new Grid(this.cellCount, this.width, this.height, this.cellSize);\n        this.maze = new Maze(this.cellCount, this.cellSize, this.width, this.height, this.grid);\n\n\n        this.viewport = new Camera(this.width, this.height, size, this.cellSize.w);\n\n        // this.initKeys();\n\n        window.addEventListener('mousemove', this.handleRotation.bind(this));\n        // window.addEventListener('click', this.handleClick.bind(this));\n        window.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        window.addEventListener('mouseup', this.handleMouseUp.bind(this));\n\n        window.setInterval(this.spawnEnemy.bind(this), 1000);\n        this.zombies = {};\n\n        this.mousePos = new Vector();\n\n        this.paused = false;\n        this.canUnpause = false;\n\n        this.gameOver = false;\n        this.gameWon = false;\n        this.started = false;\n\n        window.addEventListener(\"gamepadconnected\", (e) => {\n            // this.inputHandler.gamepad = e.gamepad\n            console.log('gamepad connected: ', e.gamepad);\n        });\n\n        window.addEventListener(\"gamepaddisconnected\", (event) => {\n            console.log(\"A gamepad disconnected:\");\n            delete this.inputHandler.gamepad;\n            console.log(event.gamepad);\n        });\n\n        // for (let i = 0; i < 3; i++) this.spawnEnemy();\n        this.initSprites();\n        this.ui = new UIManager(this.player);\n        this.initialTime = Date.now();\n    }\n\n    restart() {\n        delete this.player;\n        delete this.grid;\n        delete this.maze;\n        delete this.zombies;\n        delete this.greenKey;\n        delete this.blueKey;\n        delete this.redKey;\n        this.player = new Player(this.rm.get('player_standing'), this.cellSize, this.ih);\n        this.grid = new Grid(this.cellCount, this.width, this.height, this.cellSize);\n        this.maze = new Maze(this.cellCount, this.cellSize, this.width, this.height, this.grid);\n        this.zombies = {};\n        this.initKeys();\n\n        this.gameOver = false;\n        this.gameWon = false;\n        this.paused = false;\n        this.canUnpause = false;\n        this.initialTime = Date.now();\n    }\n\n    initSprites() {\n        this.initPlayer();\n        // this.blueKeySprite = this.rm.get('blueK');\n        // this.greenKeySprite = this.rm.get('greenK');\n        // this.redKeySprite = this.rm.get('redK');\n        this.initFlags();\n        this.initKeys();\n    }\n\n    initPlayer() {\n        this.player.sprite = this.rm.get('player_standing');\n        Bullet.sprite = this.player.bulletSprite = this.rm.get('bullet');\n        // Object.values(this.player.bullets).forEach(bullet => bullet.sprite = this.player.bulletSprite);\n        // debugger\n    }\n\n    initFlags() {\n        this.startFlag = new Flag(this.rm.get('start_flag'), this.cellSize);\n        this.endFlag = new Flag(this.rm.get('end_flag'), this.cellSize);\n        this.endFlag.sprite.size = this.startFlag.sprite.size = {\n            w: this.cellSize.w / 4,\n            h: this.cellSize.w / 4\n        };\n        this.startFlag.position.x = 0;\n        this.startFlag.position.y = 0;\n        this.endFlag.position.x = this.cellCount * this.cellSize.w - this.endFlag.sprite.size.w;\n        this.endFlag.position.y = this.cellCount * this.cellSize.h - this.endFlag.sprite.size.h;\n    }\n\n    initKeys() {\n        this.blueKey = new Key(this.rm.get('blueK'), this.cellSize, 'blue');\n        this.redKey = new Key(this.rm.get('redK'), this.cellSize, 'red');\n        this.greenKey = new Key(this.rm.get('greenK'), this.cellSize, 'green');\n        this.keys = [this.blueKey, this.redKey, this.greenKey];\n\n        const indices = [];\n        while (indices.length < 3) {\n            const i = Math.floor(Math.random() * this.grid.cells.length);\n            if (!indices.includes(i)) indices.push(i);\n            else continue;\n        }\n\n        this.keys.forEach((key, idx) => {\n            const cell = this.grid.cells[indices.pop()];\n            key.position.x = cell.col * this.cellSize.w;\n            key.position.y = cell.row * this.cellSize.h;\n            // console.log('key:', idx, '=', `row: ${cell.row} col: ${cell.col}`);\n            key.sprite.size = {\n                w: this.cellSize.w / 4,\n                h: this.cellSize.h / 6\n            };\n        });\n\n        Key.default = new Key(this.rm.get('grayK'), this.cellSize, 'default');\n\n        // console.log('keys initialized');\n        // console.log(this.keys);\n    }\n\n    spawnEnemy() {\n        if (Object.keys(this.zombies).length >= MAX_ENEMIES || this.paused) return;\n        let row = Math.floor(this.player.position.y / this.player.size.h);\n        let col = Math.floor(this.player.position.x / this.player.size.w);\n        let end = index(row, col, this.cellCount);\n        // this.zombies.push(new Enemy(`zombie_${this.zombies.length + 1}`, this.rm.get('zombie'), this.cellSize, this.grid.cells, end));\n        // let cells = this.grid.cells.map(cell => new Cell(cell.row, cell.col, cell.size));\n        let cells = Array.from(this.grid.cells);\n        for (let i = 0; i < cells.length; i++) {\n            const cell = cells[i];\n            cells[i] = Object.assign({}, Object.create(Object.getPrototypeOf(cell)), cell);\n            // cells[i] = new Cell(cell.row, cell.col, cell.size);\n        }\n        let zombie = new Boid(`zombie_${this.zombies.length + 1}`, this.rm.get('zombie'), this.cellSize, this.grid.cells, end);\n        window.setInterval(this.updateSolver.bind(this, zombie), 1000);\n        // this.zombies.push(zombie);\n        this.zombies[zombie.id] = zombie;\n    }\n\n    updateSolver(zombie) {\n\n        let row = Math.floor(this.player.position.y / this.player.size.h);\n        let col = Math.floor(this.player.position.x / this.player.size.w);\n        // let end = this.grid.cells[index(row, col, this.cellCount)];\n        // let end = this.grid.cells[index(row, col, this.cellCount)];\n        // console.log(player.position.x, player.position.y);\n        // console.log(row, col);\n        let end = index(row, col, this.cellCount);\n        // let end2 = this.enemy.solver.cells[index(row, col, this.cellCount)];\n        // this.zombies.forEach(zombie => zombie.updateSolver(end));\n        zombie.updateSolver(end);\n    }\n\n    resize() {\n        const ratio = 16 / 9;\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        // if (this.canvas.width > this.canvas.height / ratio) this.canvas.width = this.canvas.height * ratio;\n        // else if (this.canvas.height > this.canvas.width / ration) this.canvas.height = this.canvas.width * ratio;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        this.cellSize = {\n            w: 150,\n            h: 150\n            // w: this.width / this.cellCount,\n            // h: this.height / this.cellCount\n        };\n        if (this.viewport) {\n            this.viewport.screen.x = this.width;\n            this.viewport.screen.y = this.height;\n        }\n        if (this.grid) {\n            this.grid.cells.forEach(cell => {\n                cell.size = this.cellSize;\n                cell.resize();\n            });\n        }\n        // if (this.player) this.player.sprite.resize(this.cellSize);\n        if (this.zombies && Object.keys(this.zombies).length > 0) {\n            Object.values(this.zombies).forEach(zombie => zombie.resize(this.cellSize));\n        }\n        // if (this.enemy) this.enemy.resize(this.cellSize);\n        // if (this.enemy2) this.enemy2.resize(this.cellSize);\n        // if (this.solver && this.solver.finished) {\n        //     this.solver.path.resize();\n        // }\n        // const widthToHeight = 4 / 3;\n        // let width = window.innerWidth - 5;\n        // let height = window.innerHeight - 5;\n        // this.canvas.width = width;\n        // this.canvas.height = height;\n        // const fwidthToHeight = width / height;\n\n        // const gameContent = document.getElementById('main-content');\n        // // debugger\n        // if (fwidthToHeight > widthToHeight) {\n        //     width = height * widthToHeight;\n        //     gameContent.style.height = height + 'px';\n        //     gameContent.style.width = width + 'px';\n        // } else {\n        //     height = width / widthToHeight;\n        //     gameContent.style.height = height + 'px';\n        //     gameContent.style.width = width + 'px';\n        // }\n\n        // gameContent.style.marginTop = (-height / 2) + 'px';\n        // gameContent.style.marginLeft = (-width / 2) + 'px';\n\n        // this.canvas.width = innerWidth;\n        // this.canvas.height = innerHeight;\n    }\n\n    getMousePosition(e) {\n        const rect = this.canvas.getBoundingClientRect();\n        const mousePos = {\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top\n        };\n\n        const dy = mousePos.y - this.canvas.height / 2;\n        const dx = mousePos.x - this.canvas.width / 2;\n\n        this.mousePos.x = dx;\n        this.mousePos.y = dy;\n        return { x: dx, y: dy };\n    }\n\n    handleMouseDown(e) {\n        e.preventDefault();\n        this.player.firing = true;\n\n    }\n\n    handleMouseUp(e) {\n        e.preventDefault();\n        this.player.firing = false;\n    }\n\n    handleClick(e) {\n        // if (this.paused) return;\n        // e.preventDefault();\n        // this.player.shoot(this.getMousePosition(e));\n\n    }\n\n    handleRotation(e) {\n        if (this.paused) return;\n        this.mousePos = this.getMousePosition(e);\n        // this.player.shoot = this.player.shoot.bind(this.player, this.mousePos);\n    }\n\n    // spawnEnemy() {\n\n    // }\n\n    updateGamepad() {\n        this.gamepad = navigator.getGamepads()[0];\n        if (!this.gamepad) return false; // no gamepad to update. Use key states from inputHandler\n\n        // handle shooting bullets\n        if (this.gamepad.axes[4] > 0.7) {\n            // console.log('Right Trigger Pressed');\n            this.player.shoot(this.mousePos);\n        }\n\n        // handle velocity\n        this.player.velocity.x = this.gamepad.axes[0] * this.player.speed;\n        this.player.velocity.y = this.gamepad.axes[1] * this.player.speed;\n\n        // handle rotation\n        // if ((this.gamepad.axes[2] !== 0 && Math.abs(this.gamepad.axes[3]) >= 0.001) ||\n        //     (Math.abs(this.gamepad.axes[2]) >= 0.001 && Math.abs(this.gamepad.axes[3]) !== 0)) {\n        if (Math.abs(this.gamepad.axes[2]) >= 0.001 || Math.abs(this.gamepad.axes[3]) >= 0.001) {\n            this.player.delta = new Vector(this.gamepad.axes[2], this.gamepad.axes[3]);\n            this.player.angle = Math.atan2(this.gamepad.axes[3], this.gamepad.axes[2]) * 180 / Math.PI;\n        }\n\n        if (this.player.angle < 0) {\n\n            this.player.angle = 360 + this.player.angle;\n\n        }\n\n        // successfully updated gamepad\n        return true;\n    }\n\n    // handleInput() {\n    //     if (this.ih.isPressed(KEYS.SPACE)) {\n    //         if (this.canUnpause) this.paused = false;\n    //         else this.paused = true;\n    //     }\n    // }\n\n    checkKeyCollision(key) {\n        // const l1 = collider.getLeft() + collider.size / 4;\n        const l1 = this.player.position.x;\n        // const t1 = collider.getTop() + collider.size / 6;\n        const t1 = this.player.position.y;\n        // const r1 = collider.getRight() - collider.size / 4;\n        const r1 = this.player.position.x + this.player.sprite.width;\n        // const b1 = collider.getBottom() - collider.size / 8;\n        const b1 = this.player.position.y + this.player.sprite.height;\n\n        // const l2 = collidee.col * 48;\n        // const t2 = collidee.row * 48;\n        // const r2 = collidee.col * 48 + 48;\n        // const b2 = collidee.row * 48 + 48;\n\n        const l2 = key.position.x + this.cellSize.w / 2;\n        const t2 = key.position.y + this.cellSize.h / 2;\n        const r2 = key.position.x + this.cellSize.w / 2 + key.sprite.size.w;\n        const b2 = key.position.y + this.cellSize.h / 2 + key.sprite.size.h;\n\n        if (b1 < t2 || t1 > b2 || r1 < l2 || l1 > r2) {\n            return false;\n        }\n\n        this.player.pickUpKey(key);\n        let found;\n        for (let i = 0; i < this.keys.length; i++) {\n            if (this.keys[i] === key) {\n                found = i;\n                break;\n            }\n        }\n        this.keys.splice(found, 1);\n        return true;\n    }\n\n    isWinner() {\n        // const cell = this.grid.cells[this.grid.cells.length - 1];\n\n        // const l1 = collider.getLeft() + collider.size / 4;\n        const l1 = this.player.position.x;\n        // const t1 = collider.getTop() + collider.size / 6;\n        const t1 = this.player.position.y;\n        // const r1 = collider.getRight() - collider.size / 4;\n        const r1 = this.player.position.x + this.player.sprite.width;\n        // const b1 = collider.getBottom() - collider.size / 8;\n        const b1 = this.player.position.y + this.player.sprite.height;\n\n        const l2 = this.endFlag.position.x;\n        const t2 = this.endFlag.position.y;\n        const r2 = this.endFlag.position.x + this.endFlag.sprite.size.w;\n        const b2 = this.endFlag.position.y + this.endFlag.sprite.size.h;\n        // const l2 = cell.col * cell.size.w;\n        // const t2 = cell.row * cell.size.h;\n        // const r2 = cell.col * cell.size.w + cell.size.w;\n        // const b2 = cell.row * cell.size.h + cell.size.h;\n\n        if (b1 < t2 || t1 > b2 || r1 < l2 || l1 > r2) {\n            return false;\n        }\n        // this.paused = true;\n        // this.visible = true;\n        // this.type = \"congratulations\";\n        if (Object.keys(this.player.keys).every(key => this.player.keys[key])) {\n            this.totalTime = (Date.now() - this.player.time) / 1000.0;\n            this.gameWon = true;\n        }\n        return true;\n    }\n\n    update(dt) {\n        // check if game over\n        if (this.player.dead()) this.gameOver = true;\n\n        // recalculate portion of game map that is collidable\n        this.collisionDetector.updateCollidables(this.viewport.startTile, this.viewport.endTile, this.grid.cells);\n\n        // if gamepad is connected, update player position using gamepad otherwise handle keyboard and mouse input\n        if (!this.updateGamepad()) {\n            this.player.handleInput();\n            this.player.handleRotation(this.mousePos);\n            if (this.player.firing) this.player.shoot(this.mousePos);\n        }\n        this.player.update(dt, this.collisionDetector);\n\n        // resolve any collisions that may have occurred after player movement\n        const collided = this.collisionDetector.detectCollision(this.player);\n        collided.forEach(collision => this.collisionDetector.resolveCollision(collision, this.player));\n\n        // update all the zombies\n        Object.keys(this.zombies).forEach(id => {\n            const zombie = this.zombies[id];\n            zombie.solver.update();\n            // if (zombie.solver.finished) {\n            // zombie.follow(zombie.solver.path);\n            zombie.applyBehaviors(zombie.solver.path, Object.values(this.zombies), this.player.position);\n            // debugger\n            zombie.update();\n            // }\n            // zombie.applyBehaviors(zombie.solver.path, this.zombies);\n            // zombie.solver.update();\n            // this.updateSolver(zombie);\n\n            // TODO create zombie hit function that decreases hp\n            zombie.attack(this.player);\n            if (zombie.dead()) {\n                this.player.kills++;\n                delete this.zombies[zombie.id];\n            } else {\n                Object.keys(this.player.bullets).forEach(id => {\n                    // bullets[id].update(dt);\n                    if (this.player.bullets[id].hit(zombie)) {\n                        if (zombie.dead()) {\n                            this.player.kills++;\n                            delete this.zombies[zombie.id];\n                        }\n                        delete this.player.bullets[id];\n                    }\n                    // const bullet = this.player.bullets[id];\n                    // const dist = bullet.position.dist(zombie.position);\n                    // if (dist <= bullet.radius + zombie.radius) delete this.player.bullets[id];\n                    // const collided = collisionDetector.detectCollision(bullets[id]);\n                    // if (collided.length > 0) bullets[id].collided = true;\n                    // if (bullets[id].collided) delete bullets[id];\n                });\n\n                // handle any collisions that may have occured between zombie and walls\n                const collided = this.collisionDetector.detectCollision(zombie);\n                collided.forEach(collision => this.collisionDetector.resolveCollision(collision, zombie));\n            }\n        });\n\n        if (this.keys && !this.paused) {\n            this.keys.forEach(key => {\n                // console.log(key.sprite.src);\n                // debugger\n                this.checkKeyCollision(key);\n            });\n        }\n        // this.enemy2.update();\n        this.isWinner();\n\n        this.viewport.update(this.player.position.x, this.player.position.y);\n    }\n\n    render() {\n        this.ctx.fillStyle = \"#000\";\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        // this.maze.render(this.ctx);\n\n        this.viewport.render(this.ctx, this.grid.cells);\n\n        if (this.keys && this.started) {\n            this.keys.forEach(key => {\n                // console.log(key.sprite.src);\n                // debugger\n                key.render(this.ctx, this.viewport.offset);\n            });\n            // this.blueKey.render(this.ctx, this.viewport.offset);\n            // this.greenKey.render(this.ctx, this.viewport.offset);\n            // this.redKey.render(this.ctx, this.viewport.offset);\n        }\n        // if (this.keys) console.log(this.keys);\n        // this.solver.render(this.ctx);\n        // this.enemy.render(this.ctx);\n        // this.enemy2.render(this.ctx);\n        if (this.started) this.player.render(this.ctx, this.viewport.offset);\n\n        Object.values(this.zombies).forEach(zombie => {\n            // if (zombie.solver.finished)\n            zombie.render(this.ctx, this.viewport.offset);\n        });\n\n        if (this.started) {\n            if (!this.paused) {\n                this.startFlag.render(this.ctx, this.viewport.offset);\n                this.endFlag.render(this.ctx, this.viewport.offset);\n            }\n            // this.ui.render(this.ctx);\n            this.player.renderUI(this.ctx);\n        }\n\n\n\n        // debug info mouse pos rotation angle\n        this.ctx.fillStyle = \"#fff\";\n        // this.ctx.fillText(`mouseX: ${this.mousePos.x}`, 0, 10);\n        // this.ctx.fillText(`mouseY: ${this.mousePos.y}`, 0, 20);\n        // this.ctx.fillText(`player_angle: ${this.player.angle}`, 0, 30);\n    }\n}\n\nmodule.exports = Game;\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./game */ \"./src/game.js\");\nconst Menu = __webpack_require__(/*! ./utils/splash_menu */ \"./src/utils/splash_menu.js\");\n\nconst ResourceManager = __webpack_require__(/*! ./utils/resource_manager */ \"./src/utils/resource_manager.js\");\n\nconst assets = {\n    'baseball_bat': 'assets/images/baseball_bat.png',\n    'blue_foot': 'assets/images/blue_foot.png',\n    'blue_shoulder': 'assets/images/blue_shoulder.png',\n    'bottom_wall': 'assets/images/bottom_wall.png',\n    'bullet': 'assets/images/bullet.png',\n    'end_flag': 'assets/images/end_flag.png',\n    'green_foot': 'assets/images/green_foot.png',\n    'green_shoulder': 'assets/images/green_shoulder.png',\n    'helmet': 'assets/images/helmet.png',\n    'left_wall': 'assets/images/left_wall.png',\n    'limb': 'assets/images/limb.png',\n    'machine_gun': 'assets/images/machine_gun.png',\n    'metal_bat': 'assets/images/metal_bat.png',\n    'pistol_reload': 'assets/images/pistol_reload.png',\n    'pistol': 'assets/images/pistol.png',\n    'player_gun': 'assets/images/player_gun.png',\n    'player_hold': 'assets/images/player_hold.png',\n    'player_machine_gun_reload': 'assets/images/player_machine_gun_reload.png',\n    'player_machine_gun': 'assets/images/player_machine_gun.png',\n    'player_standing': 'assets/images/player_standing.png',\n    'right_wall': 'assets/images/right_wall.png',\n    'start_flag': 'assets/images/start_flag.png',\n    'zombie': 'assets/images/zombie.png',\n    'zombie_hit': 'assets/images/zombie_hit.png',\n    'blueK': 'assets/images/key_blue.png',\n    'redK': 'assets/images/key_red.png',\n    'greenK': 'assets/images/key_green.png',\n    'grayK': 'assets/images/key_gray.png'\n};\n\nvar rm = new ResourceManager();\nvar game, menu;\nconst initGame = () => {\n    game = new Game(20, rm);\n    menu = new Menu(game);\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // const canvas = document.getElementById('canvas');\n    // const ctx = canvas.getContext('2d');\n    rm.load(assets);\n\n    const start = () => {\n        let time = Date.now();\n        let dt = (time - game.initialTime) / 1000.0;\n        menu.update(dt);\n        // game.update(dt);\n        // game.render();\n        menu.game.initialTime = time;\n        requestAnimationFrame(start);\n    }\n\n    rm.onReady(initGame);\n    rm.onReady(start);\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/maze/cell.js":
/*!**************************!*\
  !*** ./src/maze/cell.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Node = __webpack_require__(/*! ./solver/node */ \"./src/maze/solver/node.js\");\nconst Wall = __webpack_require__(/*! ./wall */ \"./src/maze/wall.js\");\nconst Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\n\nclass Cell {\n    constructor(row, col, size) {\n        this.row = row;\n        this.col = col;\n        this.size = size;\n        this.visited = false;\n        this.node = new Node(row, col, size);\n        this.neighbors = [];\n        this.walls = {\n            \"north\": new Wall(\n                new Vector(this.col * this.size.w, this.row * this.size.h),\n                new Vector((this.col * this.size.w) + this.size.w, this.row * this.size.h)\n            ),\n            \"east\": new Wall(\n                new Vector((this.col * this.size.w) + this.size.w, this.row * this.size.h),\n                new Vector((this.col * this.size.w) + this.size.w, (this.row * this.size.h) + this.size.h)\n            ),\n            \"south\": new Wall(\n                new Vector((this.col * this.size.w), (this.row * this.size.h) + this.size.h),\n                new Vector((this.col * this.size.w) + this.size.w, (this.row * this.size.h) + this.size.h)\n            ),\n            \"west\": new Wall(\n                new Vector(this.col * this.size.w, this.row * this.size.h),\n                new Vector(this.col * this.size.w, (this.row * this.size.h) + this.size.h)\n            )\n        };\n    }\n\n    resize() {\n        Object.keys(this.walls).forEach(dir => {\n            switch (dir) {\n                case \"north\":\n                    this.walls[dir].p1.x = this.col * this.size.w;\n                    this.walls[dir].p1.y = this.row * this.size.h;\n                    this.walls[dir].p2.x = (this.col * this.size.w) + this.size.w\n                    this.walls[dir].p2.y = this.row * this.size.h;\n                    break;\n                case \"east\":\n                    this.walls[dir].p1.x = (this.col * this.size.w) + this.size.w;\n                    this.walls[dir].p1.y = this.row * this.size.h;\n                    this.walls[dir].p2.x = (this.col * this.size.w) + this.size.w\n                    this.walls[dir].p2.y = (this.row * this.size.h) + this.size.h;\n                    break;\n                case \"south\":\n                    this.walls[dir].p1.x = (this.col * this.size.w);\n                    this.walls[dir].p1.y = (this.row * this.size.h) + this.size.h;\n                    this.walls[dir].p2.x = (this.col * this.size.w) + this.size.w\n                    this.walls[dir].p2.y = (this.row * this.size.h) + this.size.h;\n                    break;\n                case \"west\":\n                    this.walls[dir].p1.x = (this.col * this.size.w);\n                    this.walls[dir].p1.y = (this.row * this.size.h);\n                    this.walls[dir].p2.x = (this.col * this.size.w);\n                    this.walls[dir].p2.y = (this.row * this.size.h) + this.size.h;\n                    break;\n                default:\n                    break;\n            }\n            this.node.size = this.size;\n            this.node.resize();\n        });\n    }\n\n    render(ctx, color, offsetX, offsetY) {\n        // DEBUG\n        if (color) {\n            ctx.fillStyle = color;\n            ctx.fillRect(this.col * this.size.w, this.row * this.size.h, this.size.w, this.size.h);\n        }\n        else {\n            ctx.strokeStyle = \"#53A1F3\";\n            Object.values(this.walls).forEach(({ p1, p2 }) => {\n                ctx.beginPath();\n                ctx.moveTo(p1.x + offsetX, p1.y + offsetY);\n                ctx.lineTo(p2.x + offsetX, p2.y + offsetY);\n                ctx.closePath();\n                ctx.stroke();\n            });\n        }\n\n        // OFFICIAL \n        // Object.values(this.walls).forEach(({ p1, p2 }) => {\n        //     ctx.beginPath();\n        //     ctx.moveTo(p1.x + offsetX, p1.y + offsetY);\n        //     ctx.lineTo(p2.x + offsetX, p2.y + offsetY);\n        //     ctx.closePath();\n        //     ctx.stroke();\n        // });\n    }\n}\n\nmodule.exports = Cell;\n\n//# sourceURL=webpack:///./src/maze/cell.js?");

/***/ }),

/***/ "./src/maze/grid.js":
/*!**************************!*\
  !*** ./src/maze/grid.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Cell = __webpack_require__(/*! ./cell */ \"./src/maze/cell.js\");\n\nconst { index } = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.js\");\n// debugger\nclass Grid {\n    constructor(size, w, h, cellSize) {\n        this.cells = new Array(size * size);\n        this.size = {\n            w: w,\n            h: h\n        };\n        this.cellCount = size;\n\n        this.cellSize = cellSize;\n\n        this.populateGrid();\n        this.populateCells();\n    }\n\n    populateGrid() {\n        for (let j = 0; j < this.cellCount; j++) {\n            for (let i = 0; i < this.cellCount; i++) {\n                this.cells[index(i, j, this.cellCount)] = new Cell(i, j, this.cellSize);\n            }\n        }\n    }\n\n    populateCells() {\n        for (let i = 0; i < this.cells.length; i++)\n            Grid.populateCellWithNeighbors(this.cells[i], this.cells, this.cellCount, this.ctx);\n    }\n\n    static populateCellWithNeighbors(cell, cells, size) {\n        if (cells[index(cell.row - 1, cell.col, size)]) {\n            if (cell.row - 1 >= 0) {\n                cell.neighbors.push({ 'north': cells[index(cell.row - 1, cell.col, size)] });\n            }\n        }\n        if (cells[index(cell.row, cell.col + 1, size)]) {\n            cell.neighbors.push({ 'east': cells[index(cell.row, cell.col + 1, size)] });\n        }\n        if (cells[index(cell.row + 1, cell.col, size)]) {\n            if (cell.row + 1 <= size - 1) {\n                cell.neighbors.push({ 'south': cells[index(cell.row + 1, cell.col, size)] });\n            }\n        }\n        if (cells[index(cell.row, cell.col - 1, size)]) {\n            cell.neighbors.push({ 'west': cells[index(cell.row, cell.col - 1, size)] });\n        }\n\n        // cell.neighbors.forEach(cellN => {\n        //     ctx.fillStyle = \"#9A66AC\";\n        //     ctx.fillRect(cellN.row * cellN.size, cellN.col * cellN.size, cellN.size, cellN.size);\n        // });\n    }\n\n    render(ctx) {\n        for (let j = 0; j < this.cellCount; j++) {\n            for (let i = 0; i < this.cellCount; i++) {\n                let cell = this.cells[index(j, i, this.cellCount)];\n                cell.render(ctx, null, 0, 0);\n            }\n        }\n    }\n}\n\nmodule.exports = Grid;\n\n//# sourceURL=webpack:///./src/maze/grid.js?");

/***/ }),

/***/ "./src/maze/maze.js":
/*!**************************!*\
  !*** ./src/maze/maze.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const index = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.js\");\n\nclass Maze {\n    constructor(cellCount, cellSize, width, height, grid) {\n        this.cellCount = cellCount;\n        this.width = cellSize.w * cellCount;\n        this.height = cellSize.h * cellCount;\n        this.grid = grid;\n\n        this.generateMaze();\n    }\n\n\n    generateMaze() {\n        let currentCell = this.grid.cells[0];\n        currentCell.visited = true;\n        const stack = [currentCell];\n\n        while (stack.length !== 0) {\n            let neighbors = currentCell.neighbors.filter(obj => {\n                let cell = Object.values(obj)[0];\n                if (!cell) return null;\n                return !cell.visited;\n            });\n\n            let neighborDir;\n            let neighbor;\n\n            let neighborObj = neighbors[Math.floor(Math.random() * neighbors.length)];\n            if (neighborObj) {\n                neighborDir = Object.keys(neighborObj)[0];\n                neighbor = neighborObj[neighborDir];\n            }\n\n            if (neighborObj === undefined) {\n                currentCell = stack.pop();\n            }\n            else {\n                neighbor.visited = true;\n                switch (neighborDir) {\n                    case \"north\":\n                        delete currentCell.walls[\"north\"];\n                        delete neighbor.walls[\"south\"];\n                        currentCell.node.walls[\"north\"] = 1;\n                        neighbor.node.walls[\"south\"] = 1;\n                        break;\n                    case \"east\":\n                        delete currentCell.walls[\"east\"];\n                        delete neighbor.walls[\"west\"];\n                        currentCell.node.walls[\"east\"] = 1;\n                        neighbor.node.walls[\"west\"] = 1;\n                        break;\n                    case \"south\":\n                        delete currentCell.walls[\"south\"];\n                        delete neighbor.walls[\"north\"];\n                        currentCell.node.walls[\"south\"] = 1;\n                        neighbor.node.walls[\"north\"] = 1;\n                        break;\n                    case \"west\":\n                        delete currentCell.walls[\"west\"];\n                        delete neighbor.walls[\"east\"];\n                        currentCell.node.walls[\"west\"] = 1;\n                        neighbor.node.walls[\"east\"] = 1;\n                        break;\n                }\n                stack.push(neighbor);\n                currentCell = neighbor;\n            }\n        }\n    }\n\n    render(ctx) {\n        this.grid.render(ctx);\n    }\n}\n\nmodule.exports = Maze;\n\n//# sourceURL=webpack:///./src/maze/maze.js?");

/***/ }),

/***/ "./src/maze/solver/a_star.js":
/*!***********************************!*\
  !*** ./src/maze/solver/a_star.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { heuristic, index } = __webpack_require__(/*! ../../utils/utils */ \"./src/utils/utils.js\");\nconst Path = __webpack_require__(/*! ./path */ \"./src/maze/solver/path.js\");\nconst Node = __webpack_require__(/*! ./node */ \"./src/maze/solver/node.js\");\n\nclass A_Star {\n    constructor(start, end, cells) {\n        this.cells = cells;\n        // this.cells.forEach(cell => cell.node = Object.assign({}, cell.node));\n        this.cellCount = Math.sqrt(cells.length);\n        this.createNodes();\n        // this.nodes = nodes;\n        // this.start = start;\n        // this.end = end;\n\n        this.start = this.nodes[start];\n        this.end = this.nodes[end];\n\n        // this.start = cells[start];\n        // this.end = cells[end];\n\n        // console.log(this.start, this.end);\n        // debugger\n        this.openSet = [this.start];\n        this.closedSet = [];\n        this.path = new Path();\n\n        this.initialTime = Date.now();\n        // debugger\n    }\n\n    createNodes() {\n        // this.cells.forEach(cell => cell.node = Object.assign({}, Object.create(Object.getPrototypeOf(cell.node)), cell.node));\n        // this.cells.forEach((cell, idx) => this.cells[idx].node = new Node(cell.row, cell.col, cell.size));\n        // this.nodes = this.cells.map(cell => {\n        //     const node = new Node(cell.row, cell.col, cell.size, cell.neighbors, cell.node.walls);\n        //     node.neighbors = cell.neighbors.filter(obj => Object.keys(cell.node.walls)\n        //     .includes(Object.keys(obj)[0]))\n        //     .map(obj => {\n        //         let cell = Object.values(obj)[0];\n        //     })\n        // });\n        this.nodes = this.cells.map(cell => new Node(cell.row, cell.col, cell.size, cell.neighbors, cell.node.walls));\n        this.nodes.forEach(node => {\n            node.neighbors = node.neighbors.filter(obj => Object.keys(node.walls)\n                .includes(Object.keys(obj)[0]))\n                .map(obj => {\n                    let cell = Object.values(obj)[0];\n                    // let neighborNode = this.nodes[index(cell.row, cell.col, this.cellCount)];\n                    // debugger\n                    // return neighborNode;\n                    return this.nodes[index(cell.row, cell.col, this.cellCount)];\n                    //             return new Node(cell.row, cell.col, cell.size)\n                });\n        })\n    }\n\n    // updateSolver(end) {\n    //     let row = Math.floor(this.position.y / this.size.h);\n    //     let col = Math.floor(this.position.x / this.size.w);\n    //     let start = this.cells[index(row, col, this.cellCount)];\n    //     this.solver.updateSolver(start, end);\n    // }\n\n    updateSolver(startIdx, endIdx) {\n        // debugger\n        // if (!this.finished) return;\n        // debugger\n        // this.cells.forEach(cell => {\n        //     cell.node.f = 0;\n        //     cell.node.g = 0;\n        //     cell.node.h = 0;\n        //     cell.node.visited = false;\n        //     cell.node.parent = null;\n        //     // cell.node.position = Object.assign(cell.node.position);\n        // });\n        this.nodes.forEach(node => {\n            node.clear();\n            // node.neighbors.forEach(neighbor => neighbor.clear());\n        });\n        // console.log(this.path, '-------------')\n\n        // this.enemy.updateSolver(end);\n        // this.start = startIdx;\n        // this.end = endIdx;\n        // this.start = this.cells[startIdx];\n        // this.end = this.cells[endIdx];\n        this.start = this.nodes[startIdx];\n        this.end = this.nodes[endIdx];\n        // console.log(this.start, this.end);\n        this.openSet = [];\n        this.openSet.push(this.start);\n        this.closedSet = [];\n        this.finished = false;\n        this.path.clear();\n        this.initialTime = Date.now();\n        // debugger\n    }\n\n    resize() {\n        this.nodes.forEach(node => node.resize());\n    }\n\n    // updateSolver(start, end) {\n    //     this.start = start;\n    //     this.end = end;\n    //     this.openSet.push(this.start);\n    //     this.closedSet = [];\n    //     this.finished = false;\n    //     this.path.clear();\n    //     this.initialTime = Date.now();\n    // }\n\n    update() {\n        if (!this.start || !this.end) return;\n        if (this.openSet.length > 0) {\n            // console.log(this.openSet);\n            let winner = 0;\n            this.openSet.forEach((node, idx) => {\n                if (!node) { console.log(this.openSet) }\n                if (node.f < this.openSet[winner].f) winner = idx;\n            });\n            // this.openSet.forEach((cell, idx) => {\n            //     if (!cell) { console.log(this.openSet) }\n            //     if (cell.node.f < this.openSet[winner].node.f) winner = idx;\n            // });\n            const current = this.openSet[winner];\n\n            this.path.clear();\n            // let temp = current.node;\n            let temp = current;\n            this.path.addNode(temp);\n            while (temp.parent) {\n                this.path.addNode(temp.parent);\n                temp = temp.parent;\n            }\n\n            if (current === this.end) {\n                // console.log(`${(Date.now() - this.initialTime) / 1000.0} seconds`)\n                // this.path.clear();\n                this.path.clear();\n                // let temp = current.node;\n                let temp = current;\n                this.path.addNode(temp);\n                while (temp.parent) {\n                    this.path.addNode(temp.parent);\n                    temp = temp.parent;\n                }\n                this.finished = true;\n                this.openSet = [];\n                // console.log('done');\n                return;\n            }\n            // remove current from open set\n            for (let i = this.openSet.length - 1; i >= 0; i--) {\n                if (this.openSet[i] === current) {\n                    this.openSet.splice(i, 1);\n                    break;\n                }\n            }\n            // add current to closed set \n            // const neighbors = current.neighbors.filter(obj => !Object.keys(current.walls)\n            //     .includes(Object.keys(obj)[0]))\n            // debugger\n            // const neighbors = current.neighbors.filter(obj => Object.keys(current.node.neighbors)\n            //     .includes(Object.keys(obj)[0]))\n            //     .map(obj => Object.values(obj)[0]);\n            // const neighbors = current.neighbors.filter(obj => Object.keys(current.node.neighbors)\n            //     .includes(Object.keys(obj)[0]))\n            //     .map(obj => Object.values(obj)[0]);\n\n            // debugger\n            current.neighbors.forEach(neighbor => {\n                if (!neighbor.visited) {\n                    // if (!this.closedSet.includes(neighbor)) {\n                    const tentativeG = current.g + 1;\n                    let newPath = false;\n                    if (this.openSet.includes(neighbor) && tentativeG < neighbor.g) {\n                        neighbor.g = tentativeG;\n                        newPath = true;\n                        neighbor.visited = true;\n                    } else {\n                        neighbor.g = tentativeG;\n                        this.openSet.push(neighbor);\n                        neighbor.visited = true;\n                        newPath = true;\n                    }\n\n                    if (newPath) {\n                        neighbor.h = heuristic(neighbor, this.end);\n                        neighbor.f = neighbor.g + neighbor.h;\n                        neighbor.parent = current;\n                    }\n                }\n            });\n            current.visited = true;\n\n            // neighbors.forEach(neighbor => {\n            //     if (!neighbor.node.visited) {\n            //         // if (!this.closedSet.includes(neighbor)) {\n            //         const tentativeG = current.node.g + 1;\n            //         let newPath = false;\n            //         if (this.openSet.includes(neighbor) && tentativeG < neighbor.node.g) {\n            //             neighbor.node.g = tentativeG;\n            //             newPath = true;\n            //             neighbor.node.visited = true;\n            //         } else {\n            //             neighbor.node.g = tentativeG;\n            //             this.openSet.push(neighbor);\n            //             neighbor.node.visited = true;\n            //             newPath = true;\n            //         }\n\n            //         if (newPath) {\n            //             neighbor.node.h = heuristic(neighbor.node, this.end.node);\n            //             neighbor.node.f = neighbor.node.g + neighbor.node.h;\n            //             neighbor.node.parent = current.node;\n            //         }\n            //     }\n            // });\n            // current.node.visited = true;\n            this.closedSet.push(current);\n            // console.log('solving...')\n        }\n    }\n\n    render(ctx) {\n        // if (!this.finished) return;\n        this.path.render(ctx);\n    }\n}\n\nmodule.exports = A_Star;\n\n//# sourceURL=webpack:///./src/maze/solver/a_star.js?");

/***/ }),

/***/ "./src/maze/solver/node.js":
/*!*********************************!*\
  !*** ./src/maze/solver/node.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ../../utils/vector */ \"./src/utils/vector.js\");\n\nclass Node {\n    constructor(i, j, size, neighbors, walls) {\n        this.i = i;\n        this.j = j;\n        this.position = new Vector((j * size.w) + (size.w / 2), (i * size.h) + (size.h / 2));\n\n        // fix to empty\n        this.neighbors = neighbors || {};\n        //     // \"north\": Infinity,\n        //     // \"east\": Infinity,\n        //     // \"south\": Infinity,\n        //     // \"west\": Infinity\n        // };\n        this.walls = walls || {};\n        // if (neighbors && walls) {\n        //     this.neighbors = neighbors.filter(obj => Object.keys(walls)\n        //         .includes(Object.keys(obj)[0]))\n        //         .map(obj => {\n        //             let cell = Object.values(obj)[0];\n        //             return new Node(cell.row, cell.col, cell.size)\n        //         });\n        // } else {\n        // this.neighbors = [];\n        // this.walls = {};\n        // }\n        this.size = size;\n        this.radius = 2;\n        this.visited = false;\n    }\n\n    clear() {\n        this.f = 0;\n        this.g = 0;\n        this.h = 0;\n        this.visited = false;\n        this.parent = null;\n    }\n\n    resize() {\n        this.position.x = (this.j * this.size.w) + (this.size.w / 2);\n        this.position.y = (this.i * this.size.h) + (this.size.h / 2);\n    }\n}\n\nmodule.exports = Node;\n\n//# sourceURL=webpack:///./src/maze/solver/node.js?");

/***/ }),

/***/ "./src/maze/solver/path.js":
/*!*********************************!*\
  !*** ./src/maze/solver/path.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Path {\n    constructor(nodes) {\n        this.nodes = nodes || [];\n        this.radius = 20;\n\n        this.color = '#' + Math.floor(Math.random() * 16777215).toString(16);\n    }\n\n    clear() {\n        this.nodes = [];\n    }\n\n    reverse() {\n        this.nodes.reverse();\n    }\n\n    addNode(node) {\n        this.nodes.unshift(node);\n    }\n\n    getStart() {\n        return this.nodes[0].position;\n    }\n\n    getEnd() {\n        return this.nodes[this.points.length - 1].position;\n    }\n\n    render(ctx) {\n        let current, next;\n        for (let i = 0; i < this.nodes.length - 1; i++) {\n            ctx.strokeStyle = this.color;\n            // ctx.strokeStyle = \"#f00\";\n            ctx.strokeWidth = 2;\n            current = this.nodes[i];\n            next = this.nodes[i + 1];\n            ctx.beginPath();\n            ctx.moveTo(current.position.x, current.position.y);\n            ctx.lineTo(next.position.x, next.position.y);\n            ctx.stroke();\n            ctx.closePath();\n        }\n    }\n}\n\nmodule.exports = Path;\n\n//# sourceURL=webpack:///./src/maze/solver/path.js?");

/***/ }),

/***/ "./src/maze/wall.js":
/*!**************************!*\
  !*** ./src/maze/wall.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Wall {\n    constructor(p1, p2) {\n        this.p1 = p1\n        this.p2 = p2\n\n        this.a = this.p2.y - this.p1.y;\n        this.b = this.p1.x - this.p2.x;\n        this.c = this.a * this.p1.x + this.b * this.p1.y;\n    }\n\n    render() {\n        ctx.beginPath();\n        ctx.moveTo(this.p1.x, this.p1.y);\n        ctx.lineTo(this.p2.x, this.p2.y);\n        ctx.closePath();\n        ctx.stroke();\n    }\n}\n\nmodule.exports = Wall;\n\n//# sourceURL=webpack:///./src/maze/wall.js?");

/***/ }),

/***/ "./src/physics/collision.js":
/*!**********************************!*\
  !*** ./src/physics/collision.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { index } = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.js\");\n\n// const Point = require('../maze/point');\nconst Vector = __webpack_require__(/*! ../utils/vector */ \"./src/utils/vector.js\");\n\nclass CollisionDetector {\n    constructor(cellCount) {\n        this.cellCount = cellCount;\n    }\n\n    updateCollidables(startTile, endTile, grid) {\n        this.walls = [];\n        for (let j = startTile.col; j < endTile.col; j++) {\n            for (let i = startTile.row; i < endTile.row; i++) {\n                Object.values(grid[index(i, j, this.cellCount)].walls).forEach(wall => {\n                    this.walls.push(wall);\n                });\n            }\n        }\n    }\n\n    detectCollision(entity) {\n        const collided = [];\n        this.walls.forEach(wall => {\n            const nearest = this.closestPointOnLine(wall, entity);\n            if (nearest.x >= Math.min(wall.p1.x, wall.p2.x) && nearest.x <= Math.max(wall.p1.x, wall.p2.x) &&\n                nearest.y >= Math.min(wall.p1.y, wall.p2.y) && nearest.y <= Math.max(wall.p1.y, wall.p2.y)) {\n                const a = nearest.y - entity.position.y;\n                const b = nearest.x - entity.position.x;\n\n                const dist = Math.sqrt(a * a + b * b);\n\n                if (dist < entity.radius) collided.push(wall);\n            }\n        });\n        return collided;\n    }\n\n    resolveCollision(collidee, collider) {\n        const dy = collidee.p2.y - collidee.p1.y;\n        const dx = collidee.p2.x - collidee.p1.x;\n\n        let slope;\n\n        if (dy === 0) {\n            if (collidee.p1.y < collider.position.y) {\n                collider.position.y = collidee.p1.y + 1 + collider.radius;\n            } else {\n                collider.position.y = collidee.p1.y - 1 - collider.radius;\n            }\n        } else if (dx === 0) {\n            if (collidee.p1.x < collider.position.x) {\n                collider.position.x = collidee.p1.x + 1 + collider.radius;\n            } else {\n                collider.position.x = collidee.p1.x - 1 - collider.radius;\n            }\n        }\n    }\n\n    lineToLineCollision(wall1, wall2) {\n        const a1 = wall1.p2.y - wall1.p1.y;\n        const b1 = wall1.p1.x - wall1.p2.x;\n        const c1 = a1 * wall1.p1.x + b1 * wall1.p1.y;\n\n        const a2 = wall2.p2.y - wall2.p1.y;\n        const b2 = wall2.p1.x - wall2.p2.x;\n        const c2 = a2 * wall2.p1.x + b2 * wall2.p1.y;\n\n        const det = a1 * b2 - a2 * b1;\n\n        if (det !== 0) {\n            const x = (b2 * c1 - b1 * c2) / det;\n            const y = (a1 * c2 - a2 * c1) / det;\n\n            if (x >= Math.min(wall1.p1.x, wall1.p2.x) && x <= Math.max(wall1.p1.x, wall1.p2.x) &&\n                x >= Math.min(wall2.p1.x, wall2.p2.x) && x <= Math.max(wall2.p1.x, wall2.p2.x) &&\n                y >= Math.min(wall1.p1.y, wall1.p2.y) && y <= Math.max(wall1.p1.y, wall1.p2.y) &&\n                y >= Math.min(wall2.p1.y, wall2.p2.y) && y <= Math.max(wall2.p1.y, wall2.p2.y)) {\n                return new Vector(x, y);\n            }\n        }\n        return null;\n    }\n\n    closestPointOnLine(wall, circle) {\n        const a = wall.p2.y - wall.p1.y;\n        const b = wall.p1.x - wall.p2.x;\n\n        const c1 = a * wall.p1.x + b * wall.p1.y;\n        const c2 = -b * circle.position.x + a * circle.position.y;\n\n        const det = a * a + b * b;\n        let cx = 0;\n        let cy = 0;\n\n        if (det != 0) {\n            cx = (a * c1 - b * c2) / det;\n            cy = (a * c2 + b * c1) / det;\n        } else {\n            cx = circle.position.x;\n            cy = circle.position.y;\n        }\n\n        return new Vector(cx, cy);\n    }\n}\n\nmodule.exports = CollisionDetector;\n\n//# sourceURL=webpack:///./src/physics/collision.js?");

/***/ }),

/***/ "./src/utils/input.js":
/*!****************************!*\
  !*** ./src/utils/input.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const KEYS = __webpack_require__(/*! ./keys */ \"./src/utils/keys.js\");\n\nclass InputManager {\n    constructor() {\n        this.pressedKeys = {};\n\n        window.addEventListener('keydown', e => this.setKey(e, true));\n        window.addEventListener('keyup', e => this.setKey(e, false));\n    }\n\n    setKey(e, status) {\n        e.preventDefault();\n        let key;\n        switch (e.keyCode) {\n            case 32:\n                key = KEYS.SPACE;\n                break;\n            case 13:\n                key = KEYS.ENTER;\n                break;\n            case 65:\n                key = KEYS.LEFT;\n                break;\n            case 87:\n                key = KEYS.UP;\n                break;\n            case 68:\n                key = KEYS.RIGHT;\n                break;\n            case 83:\n                key = KEYS.DOWN;\n                break;\n            case 37:\n                key = KEYS.LEFT;\n                break;\n            case 38:\n                key = KEYS.UP;\n                break;\n            case 39:\n                key = KEYS.RIGHT;\n                break;\n            case 40:\n                key = KEYS.DOWN;\n                break;\n            default:\n                // Convert ASCII codes to letters\n                key = String.fromCharCode(e.keyCode);\n\n        }\n\n        this.pressedKeys[key] = status;\n    }\n\n    isPressed(key) {\n        return this.pressedKeys[key];\n    }\n}\n\nmodule.exports = InputManager;\n\n//# sourceURL=webpack:///./src/utils/input.js?");

/***/ }),

/***/ "./src/utils/keys.js":
/*!***************************!*\
  !*** ./src/utils/keys.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n    SPACE: \"SPACE\",\n    ENTER: \"ENTER\",\n    LEFT: \"LEFT\",\n    UP: \"UP\",\n    RIGHT: \"RIGHT\",\n    DOWN: \"DOWN\"\n};\n\n//# sourceURL=webpack:///./src/utils/keys.js?");

/***/ }),

/***/ "./src/utils/resource_manager.js":
/*!***************************************!*\
  !*** ./src/utils/resource_manager.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class ResourceManager {\n    constructor() {\n        this.resourceCache = {};\n        this.loading = [];\n        this.callbacks = [];\n    }\n\n    load(resource) {\n        if (resource instanceof Object) {\n            Object.keys(resource).forEach(key => this._load(key, resource[key]));\n        } else this._load(resource);\n    }\n\n    _load(key, url) {\n        if (this.resourceCache[key]) return this.resourceCache[key];\n        else {\n            this.loading.push(url);\n\n            const img = new Image();\n            img.onload = () => {\n                this.resourceCache[key] = img;\n                if (this.isReady()) this.callbacks.forEach(cb => cb());\n            }\n            img.src = url;\n            this.resourceCache[key] = img;\n            // debugger\n        }\n    }\n\n    get(url) {\n        return this.resourceCache[url];\n    }\n\n    isReady() {\n        let ready = true;\n        for (let k in this.resourceCache) {\n            if (this.resourceCache.hasOwnProperty(k) && !(this.resourceCache[k]))\n                ready = false;\n        };\n        return ready;\n    }\n\n    onReady(func) {\n        this.callbacks.push(func);\n    }\n}\n\nmodule.exports = ResourceManager;\n\n//# sourceURL=webpack:///./src/utils/resource_manager.js?");

/***/ }),

/***/ "./src/utils/splash_menu.js":
/*!**********************************!*\
  !*** ./src/utils/splash_menu.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const KEYS = __webpack_require__(/*! ./keys */ \"./src/utils/keys.js\");\n\nclass Menu {\n    constructor(game, type) {\n        this.type = type || \"start\";\n        this.game = game;\n        this.spaceDown = false;\n        this.spaceUp = true;\n        this.paused = ['.', '..', '...'];\n        this.pauseCounter = 0;\n\n        this.game.paused = true;\n        this.visible = true;\n    }\n\n    renderStart(ctx) {\n        ctx.fillStyle = \"#f00\";\n        ctx.font = '120px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`Monster Maze`, this.game.width / 2, this.game.height / 2);\n        // ctx.fillText(`PAUSED${this.paused[this.pauseCounter]}`, this.game.width / 2, this.game.height / 2);\n\n        ctx.font = '20px Arial';\n        ctx.fillText(`Press ENTER to Start Game`, this.game.width / 2, this.game.height / 2 + 40);\n    }\n\n    updatePause() {\n        this.pauseCounter += 1;\n        this.pauseCounter %= this.paused.length;\n        // console.log(this.pauseCounter);\n    }\n\n    renderPause(ctx) {\n        ctx.fillStyle = \"#fff\";\n        ctx.font = '120px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`PAUSED`, this.game.width / 2, this.game.height / 2);\n        // ctx.fillText(`PAUSED${this.paused[this.pauseCounter]}`, this.game.width / 2, this.game.height / 2);\n\n        ctx.font = '20px Arial';\n        ctx.fillText(`Press SPACE to Resume Game`, this.game.width / 2, this.game.height / 2 + 40);\n    }\n\n    renderWinner(ctx) {\n        ctx.fillStyle = \"#0ff\";\n        ctx.font = '120px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`You Survived...`, this.game.width / 2, this.game.height / 2);\n        // ctx.fillText(`PAUSED${this.paused[this.pauseCounter]}`, this.game.width / 2, this.game.height / 2);\n\n        ctx.textAlign = 'left';\n        ctx.font = '40px Arial';\n        ctx.fillText(`Time: ${this.game.totalTime}s`, this.game.width / 4 + 100, this.game.height / 2 + 40);\n\n        ctx.textAlign = 'left';\n        ctx.font = '40px Arial';\n        ctx.fillText(`Kills: ${this.game.player.kills}`, this.game.width / 2 + 200, this.game.height / 2 + 40);\n\n        ctx.textAlign = 'center';\n        ctx.font = '20px Arial';\n        ctx.fillText(`Press ENTER to Start Next Round`, this.game.width / 2, this.game.height / 2 + 100);\n    }\n\n    renderGameOver(ctx) {\n        ctx.fillStyle = \"#f00\";\n        ctx.font = '120px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`GAME OVER!`, this.game.width / 2, this.game.height / 2);\n        // ctx.fillText(`PAUSED${this.paused[this.pauseCounter]}`, this.game.width / 2, this.game.height / 2);\n\n        ctx.font = '20px Arial';\n        ctx.fillText(`Press ENTER to Try Again`, this.game.width / 2, this.game.height / 2 + 40);\n    }\n\n    handleInput() {\n        if (this.game.ih.isPressed(KEYS.SPACE)) {\n            // this.spaceDown = true;\n            // this.spaceUp = false;\n            if (this.game.canUnpause) {\n                this.game.paused = false;\n                // this.game.canUnpause = false;\n                this.visible = false;\n                this.type = \"\";\n            }\n            else {\n                this.game.paused = true;\n                this.visible = true;\n                this.type = \"pause\";\n                // this.game.canUnpause = false;\n            }\n        } else {\n            // this.spaceUp = true;\n            // this.spaceDown = false;\n            if (this.game.paused) this.game.canUnpause = true;\n            else this.game.canUnpause = false;\n        }\n\n        if (this.game.ih.isPressed(KEYS.ENTER)) {\n            if (this.game.gameOver) {\n                this.game.restart();\n                this.visible = false;\n                this.type = \"\";\n            } else if (!this.started) {\n                this.visible = false;\n                this.type = \"\";\n                this.game.paused = false;\n                this.game.started = true;\n            }\n        }\n    }\n\n    update(dt) {\n        this.handleInput();\n        this.game.render();\n        if (this.visible) {\n            this.render();\n        } else if (this.game.gameOver) {\n            this.game.paused = true;\n            this.visible = true;\n            this.type = \"game_over\"\n        } else if (this.game.gameWon) {\n            this.game.paused = true;\n            this.visible = true;\n            this.game.gameOver = true;\n            this.type = \"congratulations\";\n        } else {\n            // this.game.handleInput();\n            if (!this.game.paused) {\n                this.game.update(dt);\n            }\n        }\n    }\n\n    render() {\n        switch (this.type) {\n            case \"start\":\n                this.renderStart(this.game.ctx);\n                break;\n            case \"pause\":\n                this.renderPause(this.game.ctx);\n                break;\n            case \"congratulations\":\n                this.renderWinner(this.game.ctx);\n                break;\n            case \"game_over\":\n                this.renderGameOver(this.game.ctx);\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nmodule.exports = Menu;\n\n//# sourceURL=webpack:///./src/utils/splash_menu.js?");

/***/ }),

/***/ "./src/utils/ui.js":
/*!*************************!*\
  !*** ./src/utils/ui.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class UIManager {\n    constructor(player) {\n        this.player = player;\n    }\n\n    render(ctx) {\n        // render health bar\n        ctx.fillStyle = \"#c7c7c7\";\n        ctx.fillRect(75, 40, 1000, 83);\n\n        // gradient color\n        const ar = 255;\n        const ag = 0;\n        const ab = 0;\n\n        const br = 0;\n        const bg = 255;\n        const bb = 0;\n\n        const ratio = this.player.hp / this.player.hpMax;\n        const cr = ar + (br - ar) * ratio;\n        const cg = ag + (bg - ag) * ratio;\n        const cb = ab + (bb - ab) * ratio;\n        ctx.fillStyle = `rgb(${cr}, ${cg}, ${cb})`;\n        const width = Math.floor(1000 * this.player.hp / this.player.hpMax);\n        ctx.fillRect(75, 40, width, 83);\n\n        // render heart\n        ctx.save();\n        ctx.strokeStyle = \"#fff\";\n        ctx.lineWidth = 5.0;\n        ctx.fillStyle = \"#FF0000\";\n        const d = 50\n        const k = 10;\n        ctx.beginPath();\n        ctx.moveTo(75, 40);\n        ctx.bezierCurveTo(75, 37, 70, 25, 50, 25);\n        ctx.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);\n        ctx.bezierCurveTo(20, 80, 40, 102, 75, 120);\n        ctx.bezierCurveTo(110, 102, 130, 80, 130, 62.5);\n        ctx.bezierCurveTo(130, 62.5, 130, 25, 100, 25);\n        ctx.bezierCurveTo(85, 25, 75, 37, 75, 40);\n        ctx.stroke();\n        ctx.fill()\n        ctx.restore();\n\n        // render keys\n        Object.keys(this.player.keys).forEach(key => {\n            if (this.player.keys[key]) {\n                key.render(ctx);\n            } else {\n                Key.render(ctx);\n            }\n        });\n    }\n}\n\nmodule.exports = UIManager;\n\n//# sourceURL=webpack:///./src/utils/ui.js?");

/***/ }),

/***/ "./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Utils {\n    static index(i, j, rows) {\n        return i + (j * rows);\n    }\n\n    static clamp(num, min, max) {\n        return Math.max(min, Math.min(num, max))\n    }\n\n    static heuristic(a, b) {\n        const dx = b.position.x - a.position.x;\n        const dy = b.position.y - a.position.y;\n        return Math.sqrt(dx * dx + dy * dy);\n        // return Math.abs(dx) + Math.abs(dy);\n    };\n\n    static map(num, x1, y1, x2, y2) {\n        return (num - x1) * (y2 - x2) / (y1 - x1) + x2;\n    }\n}\n\nmodule.exports = Utils;\n\n//# sourceURL=webpack:///./src/utils/utils.js?");

/***/ }),

/***/ "./src/utils/vector.js":
/*!*****************************!*\
  !*** ./src/utils/vector.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Vector {\n    constructor(x, y) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    // return the angle of the vector in radians\n    getDirection() {\n        return Math.atan2(this.y, this.x);\n    };\n\n    // set the direction of the vector in radians\n    setDirection(direction) {\n        var magnitude = this.getMagnitude();\n        this.x = Math.cos(direction) * magnitude;\n        this.y = Math.sin(direction) * magnitude;\n        return this;\n    };\n\n    // get the magnitude of the vector\n    getMagnitude() {\n        // use pythagoras theorem to work out the magnitude of the vector\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    };\n\n    // set the magnitude of the vector\n    setMagnitude(magnitude) {\n        var direction = this.getDirection();\n        this.x = Math.cos(direction) * magnitude;\n        this.y = Math.sin(direction) * magnitude;\n        return this;\n    };\n\n    static add(v1, v2) {\n        return new Vector(v1.x + v2.x, v1.y + v2.y);\n        // this.x += vector.x;\n        // this.y += vector.y;\n    }\n\n    static sub(v1, v2) {\n        return new Vector(v1.x - v2.x, v1.y - v2.y);\n        // this.x -= vector.x;\n        // this.y -= vectory.y;\n    }\n\n    static mult(v, scalar) {\n        return new Vector(v.x * scalar, v.y * scalar);\n        // this.x *= scalar;\n        // this.y *= scalar;\n    }\n\n    static div(v, scalar) {\n        return new Vector(v.x / scalar, v.y / scalar);\n        // this.x /= scalar;\n        // this.y /= scalar;\n    }\n\n    add(vector) {\n        // return new Vector(this.x + vector.x, this.y + vector.y);\n        // debugger\n        if (!vector) debugger;\n        this.x += vector.x;\n        this.y += vector.y;\n        return this;\n    }\n\n    subtract(vector) {\n        // return new Vector(this.x - vector.x, this.y - vector.y);\n        this.x = vector.x - this.x;\n        this.y = vector.y - this.y;\n        return this;\n    }\n\n    multiply(scalar) {\n        // return new Vector(this.x * scalar, this.y * scalar);\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n\n    divide(scalar) {\n        // return new Vector(this.x / scalar, this.y / scalar);\n        this.x /= scalar;\n        this.y /= scalar;\n        return this;\n    }\n\n    dot(vector) {\n        // debugger\n        return (this.x * vector.x) + (this.y * vector.y);\n    }\n\n    angleBetween(vector, degrees) {\n        const step = this.dot(vector) / (this.getMagnitude() * vector.getMagnitude());\n        const theta = Math.acos(step);\n        if (degrees) return theta * 180 / Math.PI;\n        else return theta;\n    }\n\n    normalize() {\n        const dist = this.getMagnitude();\n        return new Vector(this.x / dist, this.y / dist);\n    }\n\n    project(vector) {\n        const normal = vector.normalize();\n        return normal.multiply(this.dot(normal));\n    }\n\n    limit(scalar) {\n        const limited = this.normalize().multiply(Math.min(this.getMagnitude(), scalar));\n        this.x = limited.x;\n        this.y = limited.y;\n        return this;\n    }\n\n    dist(vector) {\n        const dx = vector.x - this.x;\n        const dy = vector.y - this.y;\n        return Math.sqrt((dx * dx) + (dy * dy));\n    }\n\n    copy() {\n        return new Vector(this.x, this.y);\n    }\n\n    static getNormalPoint(p, a, b) {\n        // debugger\n        const ap = Vector.sub(p, a);\n        const ab = Vector.sub(b, a);\n\n        const abNorm = ab.normalize();\n        abNorm.multiply(ap.dot(abNorm));\n\n        return Vector.add(a, abNorm);\n    }\n}\n\nmodule.exports = Vector;\n\n//# sourceURL=webpack:///./src/utils/vector.js?");

/***/ })

/******/ });